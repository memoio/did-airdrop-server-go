// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/did/create": {
            "post": {
                "description": "CreateDID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DID"
                ],
                "parameters": [
                    {
                        "description": "user signature",
                        "name": "sig",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "user address",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.CreateDIDResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/router.Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/router.Error"
                        }
                    }
                }
            }
        },
        "/did/createsigmsg": {
            "get": {
                "description": "GetCreateSigMsg",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DID"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "publicKey",
                        "name": "address",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.GetSigMsgResponse"
                        }
                    }
                }
            }
        },
        "/did/delete": {
            "post": {
                "description": "DeleteDID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DID"
                ],
                "parameters": [
                    {
                        "description": "user signature",
                        "name": "sig",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "did",
                        "name": "did",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.DeleteDIDResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/router.Error"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout",
                        "schema": {
                            "$ref": "#/definitions/router.Error"
                        }
                    }
                }
            }
        },
        "/did/deletesigmsg": {
            "get": {
                "description": "GetDeleteSigMsg",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DID"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "user did",
                        "name": "did",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.GetSigMsgResponse"
                        }
                    }
                }
            }
        },
        "/did/exist": {
            "get": {
                "description": "GetDIDExist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DID"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "user address",
                        "name": "address",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/did/info": {
            "get": {
                "description": "GetDIDInfo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DID"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "user did",
                        "name": "address",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.GetDIDInfoResponse"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/router.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "router.CreateDIDResponse": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                }
            }
        },
        "router.DIDInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "balance": {
                    "type": "number"
                },
                "chain": {
                    "type": "string"
                }
            }
        },
        "router.DeleteDIDResponse": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "router.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "router.GetDIDInfoResponse": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "info": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/router.DIDInfo"
                    }
                }
            }
        },
        "router.GetSigMsgResponse": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "DID-Server API",
	Description:      "This is a did server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
