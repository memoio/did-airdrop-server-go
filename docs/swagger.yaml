basePath: /
definitions:
  router.CreateDIDResponse:
    properties:
      did:
        type: string
    type: object
  router.DIDInfo:
    properties:
      address:
        type: string
      balance:
        type: number
      chain:
        type: string
    type: object
  router.DeleteDIDResponse:
    properties:
      did:
        type: string
      status:
        type: string
    type: object
  router.Error:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  router.GetDIDInfoResponse:
    properties:
      did:
        type: string
      info:
        items:
          $ref: '#/definitions/router.DIDInfo'
        type: array
    type: object
  router.GetSigMsgResponse:
    properties:
      msg:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: |-
    1. get createsigmsg
    2. create/createadmin (createadmin is free and not need createsigmsg)
    3. exist (confirm did exist)
    4. info (get did info)
  title: DID-Server API
  version: "1.0"
paths:
  /did/create:
    post:
      consumes:
      - application/json
      description: Create a new DID with user signature and address
      parameters:
      - description: user signature
        in: body
        name: sig
        required: true
        schema:
          type: string
      - description: user address
        in: body
        name: address
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.CreateDIDResponse'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/router.Error'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/router.Error'
      tags:
      - DID
  /did/createadmin:
    post:
      consumes:
      - application/json
      description: Create a new DID By Admin
      parameters:
      - description: user address
        in: body
        name: address
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.CreateDIDResponse'
      summary: Create a new DID By Admin
      tags:
      - DID
  /did/createsigmsg:
    get:
      consumes:
      - application/json
      description: Get the signature message for creating a DID
      parameters:
      - description: address
        in: query
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.GetSigMsgResponse'
      tags:
      - DID
  /did/createton:
    post:
      consumes:
      - application/json
      description: Create a new Ton DID By Admin
      parameters:
      - description: user address
        in: body
        name: address
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.CreateDIDResponse'
      summary: Create a new Ton DID By Admin
      tags:
      - DID
  /did/delete:
    post:
      consumes:
      - application/json
      description: DeleteDID
      parameters:
      - description: user signature
        in: body
        name: sig
        required: true
        schema:
          type: string
      - description: did
        in: body
        name: did
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.DeleteDIDResponse'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/router.Error'
        "504":
          description: Gateway Timeout
          schema:
            $ref: '#/definitions/router.Error'
      tags:
      - DID
  /did/deletesigmsg:
    get:
      consumes:
      - application/json
      description: GetDeleteSigMsg
      parameters:
      - description: user did
        in: query
        name: did
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.GetSigMsgResponse'
      tags:
      - DID
  /did/exist:
    get:
      consumes:
      - application/json
      description: GetDIDExist
      parameters:
      - description: user address
        in: query
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      tags:
      - DID
  /did/info:
    get:
      consumes:
      - application/json
      description: GetDIDInfo
      parameters:
      - description: user did
        in: query
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.GetDIDInfoResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/router.Error'
      tags:
      - DID
  /mfile/download:
    get:
      consumes:
      - application/json
      description: download file by mdid
      parameters:
      - description: mdid
        in: query
        name: mdid
        required: true
        type: string
      - description: address
        in: query
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Download
      tags:
      - mfile
  /mfile/upload/confirm:
    post:
      consumes:
      - application/json
      description: upload confirm with sig
      parameters:
      - description: sig
        in: body
        name: sig
        required: true
        schema:
          type: string
      - description: address
        in: body
        name: address
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: UploadConfirm
      tags:
      - mfile
  /mfile/upload/create:
    post:
      consumes:
      - application/json
      description: create upload request get msg to sign
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          type: string
      - description: address
        in: body
        name: address
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: UploadCreate
      tags:
      - mfile
swagger: "2.0"
